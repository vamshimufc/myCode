// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wdhrtosis.Data;

namespace wdhrtosis.Migrations
{
    [DbContext(typeof(WorkdayImportContext))]
    partial class WorkdayImportContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AddressEffectiveDate");

                    b.Property<string>("AddressId");

                    b.Property<string>("AddressLine1");

                    b.Property<string>("AddressLine2");

                    b.Property<string>("AddressLine3");

                    b.Property<string>("AddressLine4");

                    b.Property<string>("AddressLine5");

                    b.Property<string>("AddressType");

                    b.Property<string>("City");

                    b.Property<int?>("ContactId");

                    b.Property<string>("Country");

                    b.Property<string>("CountryCode");

                    b.Property<bool?>("DefaultedBusinessAddress");

                    b.Property<string>("PostalCode");

                    b.Property<bool?>("PrimaryIndicator");

                    b.Property<bool?>("PublicIndicator");

                    b.Property<string>("StateProvince");

                    b.Property<string>("StateProvinceCode");

                    b.Property<string>("UsageDataAsString")
                        .HasColumnName("UsageData");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("WD_Address");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Affiliation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Association");

                    b.Property<int?>("MembershipsId");

                    b.Property<string>("Participation");

                    b.HasKey("Id");

                    b.HasIndex("MembershipsId");

                    b.ToTable("WD_Affiliation");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.BasePayData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("CompensationId");

                    b.HasKey("Id");

                    b.HasIndex("CompensationId");

                    b.ToTable("WD_BasePayData");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Biographic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LifeEventsId");

                    b.HasKey("Id");

                    b.HasIndex("LifeEventsId");

                    b.ToTable("WD_Biographic");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("WD_Certification");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.CertificationAchievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CertificationId");

                    b.HasKey("Id");

                    b.HasIndex("CertificationId");

                    b.ToTable("WD_CertificationAchievement");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.CertificationData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CertificationAchievementId");

                    b.Property<string>("CertificationId");

                    b.Property<DateTimeOffset?>("CredentialExpirationDate");

                    b.Property<DateTimeOffset?>("CredentialIssueDate");

                    b.Property<string>("CredentialType");

                    b.Property<string>("Issuer");

                    b.Property<string>("IssuingCountry");

                    b.Property<string>("RenewalPeriod");

                    b.Property<bool?>("RenewalRequired");

                    b.Property<string>("RestrictToCountryRegion");

                    b.HasKey("Id");

                    b.HasIndex("CertificationAchievementId");

                    b.ToTable("WD_CertificationData");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Citizenship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CitizenshipCountry");

                    b.Property<string>("CitizenshipCountryCode");

                    b.Property<string>("CitizenshipStatus");

                    b.Property<int?>("DemographicId");

                    b.HasKey("Id");

                    b.HasIndex("DemographicId");

                    b.ToTable("WD_Citizenship");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Compensation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("EffectiveDate");

                    b.Property<decimal?>("TotalBasePayAnnualizedAmount")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.ToTable("WD_Compensation");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("WD_Contact");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Demographic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EthnicCategoryId");

                    b.Property<int?>("MaritalStatusesId");

                    b.Property<int?>("NationalityId");

                    b.Property<int?>("UsCitizenshipId");

                    b.HasKey("Id");

                    b.HasIndex("EthnicCategoryId");

                    b.HasIndex("MaritalStatusesId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("UsCitizenshipId");

                    b.ToTable("WD_Demographic");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Disabilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BiographicId");

                    b.Property<bool>("Disability");

                    b.HasKey("Id");

                    b.HasIndex("BiographicId");

                    b.ToTable("WD_Disabilities");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("WorkerUniversalId");

                    b.HasKey("Id");

                    b.HasIndex("WorkerUniversalId");

                    b.ToTable("WD_Education");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.EducationData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryOfEducation");

                    b.Property<bool?>("CurrentlyEnrolledIndicator");

                    b.Property<int?>("EducationId");

                    b.Property<string>("EducationalDegree");

                    b.Property<string>("EducationalDegreeCompleted");

                    b.Property<string>("EducationalInstitution");

                    b.Property<string>("EducationalInstitutionType");

                    b.Property<string>("EducationalMajorFieldOfStudy");

                    b.Property<string>("GradePointAverage");

                    b.Property<bool?>("HighestDegree");

                    b.Property<string>("School");

                    b.Property<string>("SchoolLocation");

                    b.Property<string>("StateCode");

                    b.Property<string>("StateProvinceOfEducation");

                    b.Property<string>("YearEnrolled");

                    b.Property<int?>("YearOfGraduation");

                    b.HasKey("Id");

                    b.HasIndex("EducationId");

                    b.ToTable("WD_EducationData");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContactId");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("EmailComment");

                    b.Property<string>("EmailType");

                    b.Property<bool?>("PrimaryIndicator");

                    b.Property<bool?>("PublicIndicator");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("WD_Email");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.EmploymentPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("AnnualWorkPeriodEndDate");

                    b.Property<DateTimeOffset?>("AnnualWorkPeriodStartDate");

                    b.Property<string>("BuildingName");

                    b.Property<string>("BuildingNumber");

                    b.Property<string>("BusinessTitle");

                    b.Property<DateTimeOffset?>("DisbursementPlanPeriodEndDate");

                    b.Property<DateTimeOffset?>("DisbursementPlanPeriodStartDate");

                    b.Property<string>("EmployeeType");

                    b.Property<int?>("EmploymentProfileId");

                    b.Property<string>("FloorNumber");

                    b.Property<string>("JobActiveIndicator");

                    b.Property<string>("JobBenefitsActiveIndicator");

                    b.Property<string>("JobClassificationGroup");

                    b.Property<string>("JobCode");

                    b.Property<DateTimeOffset?>("JobEffectiveDate");

                    b.Property<DateTimeOffset?>("JobEndDate");

                    b.Property<decimal?>("JobFTE")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("JobStatus");

                    b.Property<string>("JobTitle");

                    b.Property<string>("Manager");

                    b.Property<string>("PayGroup");

                    b.Property<string>("PayType");

                    b.Property<int?>("PrimaryJobIndicator");

                    b.Property<string>("RoomNumber");

                    b.Property<string>("TerminationReason");

                    b.Property<string>("TimeType");

                    b.Property<int?>("WorkPeriodPercentOfYear");

                    b.HasKey("Id");

                    b.HasIndex("EmploymentProfileId");

                    b.ToTable("WD_EmploymentPosition");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.EmploymentProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Campus");

                    b.Property<string>("CampusMailStop");

                    b.Property<DateTimeOffset?>("ContinuousServiceDate");

                    b.Property<DateTimeOffset?>("HireDate");

                    b.Property<string>("LocationHierarchy");

                    b.Property<string>("OptOutTotalDirectoryInfo");

                    b.Property<string>("OptOutWURecord");

                    b.Property<DateTimeOffset?>("OrigHireDate");

                    b.Property<int?>("RetireeIndicator");

                    b.Property<string>("Status");

                    b.Property<DateTimeOffset?>("TerminationDate");

                    b.Property<decimal?>("TotalFTE")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("WorkerPrimaryPositionType");

                    b.Property<string>("WorkerType");

                    b.HasKey("Id");

                    b.ToTable("WD_EmploymentProfile");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.EthnicCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EthnicCategory");

                    b.HasKey("Id");

                    b.ToTable("WD_EthnicCategories");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Ethnicity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DemographicId");

                    b.Property<string>("Ethnicities");

                    b.HasKey("Id");

                    b.HasIndex("DemographicId");

                    b.ToTable("WD_Ethnicity");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.ExamHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CertificationId");

                    b.Property<bool?>("ExamActive");

                    b.Property<DateTimeOffset?>("ExamDate");

                    b.Property<int?>("ExamScore");

                    b.HasKey("Id");

                    b.HasIndex("CertificationId");

                    b.ToTable("WD_ExamHistory");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.ExternalJobHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("WorkerUniversalId");

                    b.HasKey("Id");

                    b.HasIndex("WorkerUniversalId");

                    b.ToTable("WD_ExternalJobHistory");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BiographicId");

                    b.Property<string>("GenderCategory");

                    b.Property<string>("GenderType");

                    b.HasKey("Id");

                    b.HasIndex("BiographicId");

                    b.ToTable("WD_Gender");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.GovernmentId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("ExpiryDate");

                    b.Property<string>("IdNumber");

                    b.Property<string>("IdType");

                    b.Property<DateTimeOffset?>("IssuedDate");

                    b.Property<string>("IssuingCountry");

                    b.Property<string>("WorkerUniversalId");

                    b.HasKey("Id");

                    b.HasIndex("WorkerUniversalId");

                    b.ToTable("WD_GovernmentId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.JobHistoryData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Company");

                    b.Property<string>("Contact");

                    b.Property<DateTimeOffset?>("EndDate");

                    b.Property<string>("ExternalEmploymentId");

                    b.Property<int?>("ExternalJobHistoryId");

                    b.Property<string>("JobReference");

                    b.Property<string>("JobTitle");

                    b.Property<string>("Location");

                    b.Property<string>("ResponsibilitiesAndAchievements");

                    b.Property<DateTimeOffset?>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("ExternalJobHistoryId");

                    b.ToTable("WD_JobHistoryData");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.LifeEvents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BirthCountry");

                    b.Property<string>("BirthCountryCode");

                    b.Property<DateTimeOffset?>("BirthDate");

                    b.Property<string>("BirthPlace");

                    b.Property<string>("BirthStateProvince");

                    b.Property<string>("BirthStateProvinceCode");

                    b.Property<DateTimeOffset?>("DeathDate");

                    b.HasKey("Id");

                    b.ToTable("WD_LifeEvents");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.MaritalStatuses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MaritalStatus");

                    b.HasKey("Id");

                    b.ToTable("WD_MaritalStatuses");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Memberships", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("WD_Memberships");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.MilitaryService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DemographicId");

                    b.Property<DateTimeOffset?>("MilitaryDischargeDate");

                    b.Property<string>("MilitaryServiceDischargeType");

                    b.Property<string>("MilitaryServiceStatus");

                    b.HasKey("Id");

                    b.HasIndex("DemographicId");

                    b.ToTable("WD_MilitaryService");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Name", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<string>("PreferredFirstName");

                    b.Property<string>("PreferredLastName");

                    b.Property<string>("PreferredMiddleName");

                    b.Property<string>("PreferredPrefix");

                    b.Property<string>("PreferredSuffix");

                    b.Property<string>("Prefix");

                    b.Property<string>("Pronunciation");

                    b.Property<string>("ReportingName");

                    b.Property<string>("Suffix");

                    b.HasKey("Id");

                    b.ToTable("WD_Name");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NationalityCountry");

                    b.HasKey("Id");

                    b.ToTable("WD_Nationality");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmploymentPositionId");

                    b.Property<string>("OrganizationCode");

                    b.Property<string>("OrganizationName");

                    b.Property<string>("OrganizationReferenceID");

                    b.Property<string>("OrganizationType");

                    b.HasKey("Id");

                    b.HasIndex("EmploymentPositionId");

                    b.ToTable("WD_Organization");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AreaCityCode");

                    b.Property<int?>("ContactId");

                    b.Property<string>("CountryAccessCode");

                    b.Property<string>("DeviceType");

                    b.Property<string>("Extension");

                    b.Property<string>("Number");

                    b.Property<string>("PhoneNumberFormatted");

                    b.Property<string>("PhoneType");

                    b.Property<bool?>("PrimaryIndicator");

                    b.Property<bool?>("PublicIndicator");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("WD_PhoneNumber");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Photos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("WD_Photos");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContactId");

                    b.Property<string>("SocialMediaCategory");

                    b.Property<string>("SocialMediaConnector");

                    b.Property<string>("SocialMediaType");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("WD_SocialMedia");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.SourcePhotograph", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageIdentifier");

                    b.Property<string>("Photo");

                    b.Property<string>("PhotoType");

                    b.Property<string>("PhotoUsage");

                    b.Property<string>("PhotoUsageRelease");

                    b.Property<int?>("PhotosId");

                    b.HasKey("Id");

                    b.HasIndex("PhotosId");

                    b.ToTable("WD_SourcePhotograph");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.UsCitizenship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("UsCitizen");

                    b.HasKey("Id");

                    b.ToTable("WD_UsCitizenship");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("PrimaryRoleIndicator");

                    b.Property<string>("Role");

                    b.Property<string>("WorkerUniversalId");

                    b.HasKey("Id");

                    b.HasIndex("WorkerUniversalId");

                    b.ToTable("WD_UserRole");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.VeteranStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DemographicId");

                    b.Property<bool>("Veteran");

                    b.HasKey("Id");

                    b.HasIndex("DemographicId");

                    b.ToTable("WD_VeteranStatus");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Visa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("VisaCountry");

                    b.Property<DateTimeOffset?>("VisaExpiryDate");

                    b.Property<DateTimeOffset?>("VisaIssueDate");

                    b.Property<string>("VisaIssuingAuthority");

                    b.Property<string>("VisaNumber");

                    b.Property<string>("VisaPermitDuration");

                    b.Property<string>("VisaPermitDurationType");

                    b.Property<string>("VisaPermitStatus");

                    b.Property<string>("VisaType");

                    b.Property<DateTimeOffset?>("VisaVerificationDate");

                    b.Property<string>("WorkerUniversalId");

                    b.HasKey("Id");

                    b.HasIndex("WorkerUniversalId");

                    b.ToTable("WD_Visa");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.WebUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContactId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("WD_WebUrl");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Worker", b =>
                {
                    b.Property<string>("UniversalId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BiographicId");

                    b.Property<int?>("CertificationId");

                    b.Property<int?>("CompensationId");

                    b.Property<int?>("ContactId");

                    b.Property<int?>("DemographicId");

                    b.Property<int?>("EmploymentProfileId");

                    b.Property<string>("LegacyEmployeeId");

                    b.Property<int?>("MembershipsId");

                    b.Property<int?>("NameId");

                    b.Property<int?>("PhotosId");

                    b.Property<string>("WorkerId")
                        .IsRequired();

                    b.HasKey("UniversalId");

                    b.HasIndex("BiographicId");

                    b.HasIndex("CertificationId");

                    b.HasIndex("CompensationId");

                    b.HasIndex("ContactId");

                    b.HasIndex("DemographicId");

                    b.HasIndex("EmploymentProfileId");

                    b.HasIndex("MembershipsId");

                    b.HasIndex("NameId");

                    b.HasIndex("PhotosId");

                    b.ToTable("WD_Workers");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Address", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.Contact")
                        .WithMany("Addresses")
                        .HasForeignKey("ContactId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Affiliation", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.Memberships")
                        .WithMany("Affiliations")
                        .HasForeignKey("MembershipsId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.BasePayData", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.Compensation")
                        .WithMany("BasePayData")
                        .HasForeignKey("CompensationId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Biographic", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.LifeEvents", "LifeEvents")
                        .WithMany()
                        .HasForeignKey("LifeEventsId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.CertificationAchievement", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.Certification")
                        .WithMany("CertificationAchievements")
                        .HasForeignKey("CertificationId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.CertificationData", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.CertificationAchievement")
                        .WithMany("CertificationData")
                        .HasForeignKey("CertificationAchievementId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Citizenship", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.Demographic")
                        .WithMany("Citizenships")
                        .HasForeignKey("DemographicId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Demographic", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.EthnicCategories", "EthnicCategory")
                        .WithMany()
                        .HasForeignKey("EthnicCategoryId");

                    b.HasOne("EA.Mulesoft.Models.Domain.MaritalStatuses", "MaritalStatuses")
                        .WithMany()
                        .HasForeignKey("MaritalStatusesId");

                    b.HasOne("EA.Mulesoft.Models.Domain.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId");

                    b.HasOne("EA.Mulesoft.Models.Domain.UsCitizenship", "UsCitizenship")
                        .WithMany()
                        .HasForeignKey("UsCitizenshipId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Disabilities", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.Biographic")
                        .WithMany("Disabilities")
                        .HasForeignKey("BiographicId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Education", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.Worker")
                        .WithMany("Education")
                        .HasForeignKey("WorkerUniversalId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.EducationData", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.Education")
                        .WithMany("EducationData")
                        .HasForeignKey("EducationId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Email", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.Contact")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("ContactId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.EmploymentPosition", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.EmploymentProfile")
                        .WithMany("EmploymentPosition")
                        .HasForeignKey("EmploymentProfileId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Ethnicity", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.Demographic")
                        .WithMany("Ethnicities")
                        .HasForeignKey("DemographicId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.ExamHistory", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.Certification")
                        .WithMany("ExamHistory")
                        .HasForeignKey("CertificationId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.ExternalJobHistory", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.Worker")
                        .WithMany("ExternalJobHistory")
                        .HasForeignKey("WorkerUniversalId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Gender", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.Biographic")
                        .WithMany("Genders")
                        .HasForeignKey("BiographicId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.GovernmentId", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.Worker")
                        .WithMany("GovernmentIds")
                        .HasForeignKey("WorkerUniversalId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.JobHistoryData", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.ExternalJobHistory")
                        .WithMany("JobHistoryData")
                        .HasForeignKey("ExternalJobHistoryId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.MilitaryService", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.Demographic")
                        .WithMany("MilitaryService")
                        .HasForeignKey("DemographicId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Organization", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.EmploymentPosition")
                        .WithMany("Organization")
                        .HasForeignKey("EmploymentPositionId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.PhoneNumber", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.Contact")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("ContactId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.SocialMedia", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.Contact")
                        .WithMany("SocialMedia")
                        .HasForeignKey("ContactId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.SourcePhotograph", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.Photos")
                        .WithMany("SourcedPhotographs")
                        .HasForeignKey("PhotosId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.UserRole", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.Worker")
                        .WithMany("UserRole")
                        .HasForeignKey("WorkerUniversalId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.VeteranStatus", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.Demographic")
                        .WithMany("VeteranStatus")
                        .HasForeignKey("DemographicId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Visa", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.Worker")
                        .WithMany("Visas")
                        .HasForeignKey("WorkerUniversalId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.WebUrl", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.Contact")
                        .WithMany("Websites")
                        .HasForeignKey("ContactId");
                });

            modelBuilder.Entity("EA.Mulesoft.Models.Domain.Worker", b =>
                {
                    b.HasOne("EA.Mulesoft.Models.Domain.Biographic", "Biographic")
                        .WithMany()
                        .HasForeignKey("BiographicId");

                    b.HasOne("EA.Mulesoft.Models.Domain.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("CertificationId");

                    b.HasOne("EA.Mulesoft.Models.Domain.Compensation", "Compensation")
                        .WithMany()
                        .HasForeignKey("CompensationId");

                    b.HasOne("EA.Mulesoft.Models.Domain.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("EA.Mulesoft.Models.Domain.Demographic", "Demographic")
                        .WithMany()
                        .HasForeignKey("DemographicId");

                    b.HasOne("EA.Mulesoft.Models.Domain.EmploymentProfile", "EmploymentProfile")
                        .WithMany()
                        .HasForeignKey("EmploymentProfileId");

                    b.HasOne("EA.Mulesoft.Models.Domain.Memberships", "Memberships")
                        .WithMany()
                        .HasForeignKey("MembershipsId");

                    b.HasOne("EA.Mulesoft.Models.Domain.Name", "Name")
                        .WithMany()
                        .HasForeignKey("NameId");

                    b.HasOne("EA.Mulesoft.Models.Domain.Photos", "Photos")
                        .WithMany()
                        .HasForeignKey("PhotosId");
                });
#pragma warning restore 612, 618
        }
    }
}
